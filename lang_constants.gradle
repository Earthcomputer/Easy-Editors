task buildLangConstantsFiles << {
	File langFile = project.file('src/main/resources/assets/easyeditors/lang/en_US.lang')
	File translateKeysFile = project.file('src/generated/java/net/earthcomputer/easyeditors/util/TranslateKeys.java')
	File translateFile = project.file('src/generated/java/net/earthcomputer/easyeditors/util/Translate.java')
	if (translateKeysFile.exists()) translateKeysFile.delete()
	translateKeysFile.getParentFile().mkdirs()
	translateKeysFile.createNewFile()
	if (translateFile.exists()) translateFile.delete()
	translateFile.createNewFile()
	
	String nl = System.getProperty('line.separator')
	translateKeysFile.append('package net.earthcomputer.easyeditors.util;' + nl)
	translateKeysFile.append(nl)
	translateKeysFile.append('public class TranslateKeys {' + nl)
	translateKeysFile.append(nl)
	
	langFile.eachLine {
		line ->
		if (!line.isEmpty() && !line.startsWith('#')) {
			String[] key = line.split('=', 2)
			translateKeysFile.append('\tpublic static final String ')
			translateKeysFile.append(toConstantName(key[0]))
			translateKeysFile.append(' = "')
			translateKeysFile.append(key[0])
			translateKeysFile.append('";' + nl)
		}
	}
	
	translateKeysFile.append(nl)
	translateKeysFile.append('}' + nl)
	
	translateFile.append('package net.earthcomputer.easyeditors.util;' + nl)
	translateFile.append(nl)
	translateFile.append('import java.lang.reflect.Field;' + nl)
	translateFile.append('import java.lang.reflect.Modifier;' + nl)
	translateFile.append('import java.util.Map;' + nl)
	translateFile.append(nl)
	translateFile.append('import net.earthcomputer.easyeditors.api.LanguageLoadedEvent;' + nl)
	translateFile.append('import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;' + nl)
	translateFile.append(nl)
	translateFile.append('public class Translate {' + nl)
	translateFile.append(nl)
	
	langFile.eachLine {
		line ->
		if (!line.isEmpty() && !line.startsWith('#')) {
			String[] key = line.split('=', 2)
			translateFile.append('\tpublic static String ')
			translateFile.append(toConstantName(key[0]))
			translateFile.append(';' + nl)
		}
	}
	
	translateFile.append(nl)
	translateFile.append('\t@SubscribeEvent' + nl)
	translateFile.append('\tpublic static void onLanguageLoaded(LanguageLoadedEvent e) throws Exception {' + nl)
	translateFile.append('\t\tMap<String, String> translations = e.getTranslations();' + nl)
	translateFile.append('\t\tfor (Field field : TranslateKeys.class.getFields()) {' + nl)
	translateFile.append('\t\t\tif (!Modifier.isStatic(field.getModifiers()) || !Modifier.isFinal(field.getModifiers()) || field.getType() != String.class) {' + nl)
	translateFile.append('\t\t\t\tcontinue;' + nl)
	translateFile.append('\t\t\t}' + nl)
	translateFile.append('\t\t\tField fieldHere = Translate.class.getField(field.getName());' + nl)
	translateFile.append('\t\t\tfieldHere.set(null, translations.get(field.get(null)));' + nl)
	translateFile.append('\t\t}' + nl)
	translateFile.append('\t}' + nl)
	translateFile.append(nl)
	translateFile.append('}' + nl)
}

String toConstantName(String text) {
	StringBuilder sb = new StringBuilder(text.toUpperCase().replace('.', '_'))
	for (int i = text.length() - 1; i >= 0; i--) {
		boolean isValidIdentifier;
		if (i == 0)
			isValidIdentifier = Character.isJavaIdentifierStart(sb.charAt(i))
		else
			isValidIdentifier = Character.isJavaIdentifierPart(sb.charAt(i))
		if (!isValidIdentifier) {
			sb.deleteCharAt(i)
			String replacement = Integer.toHexString(sb.charAt(i) as int).toUpperCase()
			while (replacement.length() < 4) replacement = '0' + replacement
			replacement = 'U' + replacement
			sb.insert(i, replacement)
		}
	}
	return sb.toString()
}
